// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scheduler/service.proto

package scheduler

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SchedulerService service

type SchedulerServiceClient interface {
	CreateScheduler(ctx context.Context, in *CreateSchedulerRequest, opts ...grpc.CallOption) (*CreateSchedulerResponse, error)
}

type schedulerServiceClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerServiceClient(cc *grpc.ClientConn) SchedulerServiceClient {
	return &schedulerServiceClient{cc}
}

func (c *schedulerServiceClient) CreateScheduler(ctx context.Context, in *CreateSchedulerRequest, opts ...grpc.CallOption) (*CreateSchedulerResponse, error) {
	out := new(CreateSchedulerResponse)
	err := grpc.Invoke(ctx, "/scheduler.SchedulerService/CreateScheduler", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SchedulerService service

type SchedulerServiceServer interface {
	CreateScheduler(context.Context, *CreateSchedulerRequest) (*CreateSchedulerResponse, error)
}

func RegisterSchedulerServiceServer(s *grpc.Server, srv SchedulerServiceServer) {
	s.RegisterService(&_SchedulerService_serviceDesc, srv)
}

func _SchedulerService_CreateScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).CreateScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.SchedulerService/CreateScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).CreateScheduler(ctx, req.(*CreateSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchedulerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.SchedulerService",
	HandlerType: (*SchedulerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScheduler",
			Handler:    _SchedulerService_CreateScheduler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduler/service.proto",
}

func init() { proto.RegisterFile("scheduler/service.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x4e, 0xce, 0x48,
	0x4d, 0x29, 0xcd, 0x49, 0x2d, 0xd2, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x4b, 0x48, 0x21, 0xa9, 0x29, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x81, 0xa8, 0x91, 0x92, 0x40, 0x96, 0x28, 0x2e, 0xc8, 0xcf, 0x2b, 0x86, 0xea, 0x36, 0xca,
	0xe1, 0x12, 0x08, 0x86, 0xc9, 0x05, 0x43, 0xcc, 0x15, 0x8a, 0xe0, 0xe2, 0x77, 0x2e, 0x4a, 0x4d,
	0x2c, 0x49, 0x85, 0xcb, 0x08, 0x29, 0xea, 0xc1, 0x4d, 0xd0, 0x43, 0x93, 0x0b, 0x82, 0xd8, 0x24,
	0xa5, 0x84, 0x4f, 0x09, 0xc4, 0xce, 0x24, 0x36, 0xb0, 0xa5, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x7f, 0x66, 0xc3, 0x86, 0xcd, 0x00, 0x00, 0x00,
}
