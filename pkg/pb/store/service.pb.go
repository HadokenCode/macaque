// Code generated by protoc-gen-go. DO NOT EDIT.
// source: store/service.proto

package store

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StoreService service

type StoreServiceClient interface {
	Create(ctx context.Context, in *SchedulerEntity, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	Update(ctx context.Context, in *SchedulerEntity, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	DeleteByID(ctx context.Context, in *EntityID, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetByID(ctx context.Context, in *EntityID, opts ...grpc.CallOption) (*SchedulerEntity, error)
}

type storeServiceClient struct {
	cc *grpc.ClientConn
}

func NewStoreServiceClient(cc *grpc.ClientConn) StoreServiceClient {
	return &storeServiceClient{cc}
}

func (c *storeServiceClient) Create(ctx context.Context, in *SchedulerEntity, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/store.StoreService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) Update(ctx context.Context, in *SchedulerEntity, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/store.StoreService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) DeleteByID(ctx context.Context, in *EntityID, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/store.StoreService/DeleteByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetByID(ctx context.Context, in *EntityID, opts ...grpc.CallOption) (*SchedulerEntity, error) {
	out := new(SchedulerEntity)
	err := grpc.Invoke(ctx, "/store.StoreService/GetByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StoreService service

type StoreServiceServer interface {
	Create(context.Context, *SchedulerEntity) (*google_protobuf1.Empty, error)
	Update(context.Context, *SchedulerEntity) (*google_protobuf1.Empty, error)
	DeleteByID(context.Context, *EntityID) (*google_protobuf1.Empty, error)
	GetByID(context.Context, *EntityID) (*SchedulerEntity, error)
}

func RegisterStoreServiceServer(s *grpc.Server, srv StoreServiceServer) {
	s.RegisterService(&_StoreService_serviceDesc, srv)
}

func _StoreService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulerEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.StoreService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).Create(ctx, req.(*SchedulerEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulerEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.StoreService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).Update(ctx, req.(*SchedulerEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.StoreService/DeleteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).DeleteByID(ctx, req.(*EntityID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.StoreService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetByID(ctx, req.(*EntityID))
	}
	return interceptor(ctx, in, info, handler)
}

var _StoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "store.StoreService",
	HandlerType: (*StoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StoreService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StoreService_Update_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _StoreService_DeleteByID_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _StoreService_GetByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store/service.proto",
}

func init() { proto.RegisterFile("store/service.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x8e, 0xc1, 0xca, 0x82, 0x40,
	0x14, 0x85, 0xf9, 0x17, 0xbf, 0xc1, 0x10, 0x04, 0x13, 0xb9, 0xb0, 0x77, 0x18, 0xc1, 0x08, 0x5a,
	0x97, 0x12, 0xae, 0xa5, 0x07, 0x48, 0x3d, 0x99, 0xa0, 0x5e, 0x19, 0xaf, 0x81, 0x0f, 0xdd, 0x3b,
	0x84, 0x33, 0xba, 0xcb, 0x4d, 0xcb, 0x7b, 0xce, 0xfd, 0xbe, 0x7b, 0xc5, 0xb6, 0x63, 0xd2, 0xf0,
	0x3b, 0xe8, 0x57, 0x99, 0x41, 0xb5, 0x9a, 0x98, 0xe4, 0xbf, 0x09, 0x3d, 0x69, 0xbb, 0x8c, 0xea,
	0x9a, 0x1a, 0x5b, 0x79, 0xbb, 0x69, 0x3f, 0x7b, 0x22, 0xef, 0x2b, 0xe8, 0x29, 0xde, 0x17, 0x44,
	0x45, 0x05, 0xdf, 0x4c, 0x69, 0xff, 0xf0, 0x51, 0xb7, 0x3c, 0xd8, 0x32, 0x78, 0xff, 0x89, 0x75,
	0x32, 0x62, 0x89, 0xbd, 0x22, 0x4f, 0xc2, 0xb9, 0x68, 0xdc, 0x19, 0xd2, 0x55, 0xc6, 0xa7, 0x92,
	0xd9, 0x17, 0x35, 0x5c, 0xf2, 0xe0, 0xb9, 0xca, 0x0a, 0xd5, 0x2c, 0x54, 0xd1, 0x28, 0x1c, 0xc9,
	0x5b, 0x9b, 0xff, 0x42, 0x1e, 0x85, 0x08, 0x51, 0x81, 0x71, 0x1e, 0xe2, 0x50, 0x6e, 0x26, 0xda,
	0x42, 0x71, 0xb8, 0x88, 0x05, 0x62, 0x75, 0x05, 0x2f, 0x31, 0x5f, 0x5f, 0x48, 0x1d, 0xe3, 0x38,
	0x7c, 0x02, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x6b, 0x56, 0x26, 0x5c, 0x01, 0x00, 0x00,
}
